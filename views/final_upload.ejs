<style>
    :root{
  --bg: #ffffff;
  --fg: #1f2937;
  --muted: #6b7280;
  --accent: #2563eb;
  --border: #d1d5db;
  --radius: 12px;
  --gap: 12px;
  --gap-lg: 16px;
  --maxw: 720px;
}

*{box-sizing:border-box;}
html,body{margin:0;padding:0;background:#f8fafc;color:var(--fg);font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;line-height:1.5;}
.copy-card{
  max-width: var(--maxw);
  margin: clamp(12px,4vw,40px) auto;
  padding: clamp(12px,3vw,24px);
  background: var(--bg);
  border: 1px solid var(--border);
  border-radius: var(--radius);
}
.legend{
  display:block;
  font-weight:600;
  font-size: clamp(16px,2.5vw,20px);
  margin-bottom: var(--gap);
}
.copy-row{
  display:flex;
  gap: var(--gap);
  align-items:center;
  flex-wrap:wrap;
}
.copy-input{
  flex:1 1 320px;
  min-width: 220px;
  padding: 10px 12px;
  border: 1px solid var(--border);
  border-radius: 10px;
  background: #f9fafb;
  color: var(--fg);
}
.copy-input:focus-visible{
  outline: 3px solid var(--accent);
  outline-offset: 2px;
}
.btn{
  appearance:none;
  border:1px solid var(--border);
  background:#eef2ff;
  color:#111827;
  padding:10px 14px;
  border-radius:10px;
  cursor:pointer;
  font-weight:600;
}
.btn.primary{ background:#e0e7ff; }
.btn:focus-visible{
  outline:3px solid var(--accent);
  outline-offset:2px;
}
.status{
  margin: var(--gap) 0 0 0;
  color: var(--muted);
  min-height: 1.25em;
  font-size: 0.95rem;
}

/* Mobile tweaks */
@media (max-width: 520px){
  .copy-row{flex-direction:column; align-items:stretch;}
  .btn{width:100%; text-align:center;}
}

</style>

<div class="copy-card">
  <label for="copyInput" class="legend">File link</label>
  <div class="copy-row">
    <input type="text" id="copyInput" value="<%- fileUrl %>" readonly class="copy-input" aria-describedby="copyStatus" />
    <button type="button" class="btn primary" id="copyBtn" aria-controls="copyInput" aria-label="Copy link to clipboard">Copy</button>
  </div>
  <p id="copyStatus" class="status" role="status" aria-live="polite"></p>
</div>

<script>
  (function(){
    const btn = document.getElementById('copyBtn');
    const input = document.getElementById('copyInput');
    const status = document.getElementById('copyStatus');

    function setStatus(msg, ok=true){
      status.textContent = msg;
      status.style.color = ok ? '#065f46' : '#b91c1c';
    }

    async function copyWithClipboardAPI(text){
      await navigator.clipboard.writeText(text);
    }

    function copyWithExecCommand(el){
      // Select the text and use deprecated-but-supported fallback
      const prevReadOnly = el.readOnly;
      el.readOnly = false; // some browsers require non-readonly for select + execCommand
      el.select();
      el.setSelectionRange(0, el.value.length);
      const success = document.execCommand && document.execCommand('copy');
      el.blur();
      el.readOnly = prevReadOnly;
      return success;
    }

    btn.addEventListener('click', async () => {
      // Ensure document is focused for some browsers
      window.focus();
      const text = input.value;

      try {
        if (navigator.clipboard && navigator.clipboard.writeText) {
          await copyWithClipboardAPI(text);
          setStatus('Copied link to clipboard.');
        } else {
          const ok = copyWithExecCommand(input);
          if (ok) setStatus('Copied link to clipboard.');
          else setStatus('Copy not supported in this context.', false);
        }
      } catch (err) {
        // Fallback attempt if Clipboard API fails (e.g., NotAllowedError)
        try {
          const ok = copyWithExecCommand(input);
          if (ok) setStatus('Copied link to clipboard.');
          else setStatus('Copy blocked by browser settings.', false);
        } catch {
          setStatus('Copy failed. Long-press and select Copy.', false);
        }
      }
    });

    // Accessibility: keyboard shortcut on input (Ctrl/Cmd+C)
    input.addEventListener('keydown', async (e) => {
      const isMac = navigator.platform.toUpperCase().includes('MAC');
      const modifier = isMac ? e.metaKey : e.ctrlKey;
      if (modifier && e.key.toLowerCase() === 'c') {
        try {
          if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(input.value);
            setStatus('Copied link to clipboard.');
          } else {
            const ok = copyWithExecCommand(input);
            if (ok) setStatus('Copied link to clipboard.');
          }
        } catch {}
      }
    });
  })();
</script>
