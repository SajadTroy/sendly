<style>
  /* Upload Form Styling */
  .upload-form {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 40px auto;
    padding: 0 20px;
  }

  .upload-card {
    width: 100%;
    max-width: 500px;
    background: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 16px;
    padding: 30px 25px;
  }

  .upload-title {
    font-size: 20px;
    font-weight: 600;
    color: #333;
    margin-bottom: 20px;
    display: block;
  }

  .file-row {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 25px;
  }

  .visually-hidden {
    display: none;
  }

  .file-name {
    font-size: 14px;
    color: #666;
    font-weight: 400;
  }

  /* Buttons */
  .btn {
    font-family: "Poppins", sans-serif;
    font-size: 14px;
    font-weight: 500;
    padding: 10px 18px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
  }

  .choose-btn {
    background: #f1f1f1;
    color: #333;
  }

  .choose-btn:hover {
    background: #e0e0e0;
  }

  .upload-btn {
    background: #fc2779;
    color: #fff;
    width: 100%;
    text-align: center;
  }

  .upload-btn:hover {
    background: #e0206b;
  }

  /* Progress bar */
  .progress-container {
    margin-top: 20px;
    width: 100%;
    background: #f1f1f1;
    border-radius: 8px;
    overflow: hidden;
    display: none;
  }

  .progress-bar {
    height: 12px;
    width: 0%;
    background: linear-gradient(90deg, #fc2779, #ff5c9a);
    transition: width 0.3s ease;
  }

  .progress-text {
    text-align: right;
    font-size: 12px;
    color: #666;
    margin-top: 6px;
    display: none;
  }

  /* File URL display */
  .file-link {
    margin-top: 15px;
    font-size: 14px;
    display: none;
  }

  .file-link a {
    color: #fc2779;
    font-weight: 600;
    text-decoration: none;
  }

  .file-link a:hover {
    text-decoration: underline;
  }
</style>

<form id="uploadForm" class="upload-form" novalidate>
  <fieldset class="upload-card">
    <legend class="upload-title">Upload Your File</legend>

    <!-- File Input -->
    <div class="file-row">
      <input type="file" id="file" required class="visually-hidden" />
      <label for="file" class="btn choose-btn">Choose File</label>
      <span id="file-chosen" class="file-name">No file chosen</span>
    </div>

    <!-- Submit -->
    <button type="submit" class="btn upload-btn">Upload File</button>

    <!-- Progress -->
    <div class="progress-container">
      <div class="progress-bar" id="progress-bar"></div>
    </div>
    <div class="progress-text" id="progress-text">0%</div>

    <!-- File URL -->
    <div class="file-link" id="file-link">
      File uploaded: <a href="#" target="_blank" id="file-url">Open file</a>
    </div>
  </fieldset>
</form>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const fileInput = document.getElementById("file");
  const fileName = document.getElementById("file-chosen");
  const form = document.getElementById("uploadForm");
  const progressBar = document.getElementById("progress-bar");
  const progressText = document.getElementById("progress-text");
  const progressContainer = document.querySelector(".progress-container");
  const fileLinkBox = document.getElementById("file-link");
  const fileUrl = document.getElementById("file-url");

  fileInput.addEventListener("change", () => {
    fileName.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (fileInput.files.length === 0) {
      alert("Please choose a file first.");
      return;
    }

    // Show progress bar and text
    progressContainer.style.display = "block";
    progressText.style.display = "block";
    progressBar.style.width = "0%"; // Reset progress bar
    progressText.textContent = "0%"; // Reset progress text

    const file = fileInput.files[0];
    const chunkSize = 5 * 1024 * 1024; // 5MB
    const totalChunks = Math.ceil(file.size / chunkSize);

    try {
      for (let i = 0; i < totalChunks; i++) {
        const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);
        const formData = new FormData();
        formData.append("chunk", chunk);
        formData.append("fileName", file.name);
        formData.append("chunkIndex", i);
        formData.append("totalChunks", totalChunks);

        const response = await fetch("/upload-chunk", { method: "POST", body: formData });

        if (!response.ok) {
          throw new Error(`Chunk ${i} upload failed: ${response.statusText}`);
        }

        const percent = Math.round(((i + 1) / totalChunks) * 100);
        progressBar.style.width = `${percent}%`;
        progressText.textContent = `${percent}%`;
      }

      // Merge chunks
      const mergeRes = await fetch("/merge-chunks", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ fileName: file.name, totalChunks }),
      });

      if (!mergeRes.ok) {
        throw new Error(`Merge failed: ${mergeRes.statusText}`);
      }

      const result = await mergeRes.json();
      if (result.file_url) {
        fileUrl.href = result.file_url;
        fileUrl.textContent = result.file_url;
        fileLinkBox.style.display = "block";
        progressText.textContent = "Upload complete!";
        progressBar.style.background = "#4caf50";
      }
    } catch (error) {
      console.error("Upload error:", error);
      progressText.textContent = "Upload failed!";
      progressBar.style.background = "#ff4444"; // Red for error
    }
  });
});
</script>
